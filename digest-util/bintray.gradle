group = LIB_GROUP
version = LIB_VERSION


def siteUrl = LIB_SITE_URL
def gitUrl = LIB_GIT_URL

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("BINTRAY_USER")
    key = properties.getProperty("BINTRAY_KEY")
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published

    configurations = ['archives'] // When uploading configuration files
    pkg {
        repo = LIB_REPO
        name = LIB_NAME
        desc = LIB_DESC
        websiteUrl = siteUrl
        issueTrackerUrl = LIB_ISSUE_TRACKER_URL
        vcsUrl = gitUrl
        licenses = [LIB_LICENSE]
        labels = [LIB_PACKAGING, LIB_LABEL]
        publicDownloadNumbers = true

        githubRepo = LIB_GITHUB_REPO //Optional Github repository
        githubReleaseNotesFile = LIB_GITHUB_RELEASE_NOTES_FILE //Optional Github readme file

        //Optional version descriptor
        version {
            //Optional configuration for GPG signing
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
            }
            //Optional configuration for Maven Central sync of the version
            mavenCentralSync {
                sync = true
                //[Default: true] Determines whether to sync the version to Maven Central.
                user = properties.getProperty("OSS_USER_TOKEN_KEY") //OSS user token: mandatory
                password = properties.getProperty("OSS_USER_TOKEN_PASSWORD")
//OSS user password: mandatory
                close = '1'
                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging LIB_PACKAGING
                name LIB_NAME
                url siteUrl
                description LIB_DESC
                artifactId LIB_ARTIFACT_ID
                licenses {
                    license {
                        name LIB_LICENSE
                        url LIB_LICENSE_URL
                    }
                }
                developers {
                    developer {
                        id LIB_DEVELOPER_ID
                        name LIB_DEVELOPER_NAME
                        email LIB_DEVELOPER_EMAIL
                    }
                }
                scm {
                    connection siteUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

task findConventions {
    doLast {
        println project.getConvention()
    }
}
